from enum import StrEnum
from typing import Any, List

from pydantic import BaseModel, Field, model_validator

from schemas.selectors import (
    ComplexElementSelector,
    LocatorElementSelector,
    TextElementSelector,
)


class ActionType(StrEnum):
    click = "click"
    dblclick = "dblclick"
    hover = "hover"
    fill = "fill"
    check = "check"
    select_option = "select_option"
    set_input_files = "set_input_files"
    focus = "focus"
    drag_to = "drag_to"
    screenshot = "screenshot"


class Action(BaseModel):
    type: ActionType
    element_selector: List[
        TextElementSelector | LocatorElementSelector | ComplexElementSelector
    ] = Field(
        default_factory=list,
        description="Selector to get element access to apply action. "
        "For all actions it's a one-element list. "
        "Except 'drag_and_drop' and 'screenshot': "
        "For 'drag_and_drop' it's two-elements list "
        "with the first element selector for element to be dragged, "
        "and the second element selector for element that will be "
        "a final destination for draggable element. "
        "For 'screenshot' it may be empty in case of desire to take a "
        "full page screenshot.",
    )
    new_page_handling_required: bool = Field(
        False, description="Whether or not action will fire new page opening."
    )
    new_page_handling_timeout: float = Field(
        10, description="Timeout in seconds to wait for new page opening.", ge=0
    )
    post_action_timeout: float = Field(
        0,
        description="Time in seconds to wait after action execution before giving up.",
        ge=0,
    )
    note: str = Field(
        "N/D",
        description="Note about the action. Will be appended to error message, "
        "generated by this action (in case of exception appearance).",
    )
    action_kwargs: dict[str, Any] = Field(
        default_factory=dict,
        description="Additional action kwargs to pass as key-word "
        "arguments into Playwright action function. "
        "E.g. 'value' argument for 'fill' action.",
    )

    @model_validator(mode="after")
    def check_type_and_element_selector_consistency(self):
        if self.type != ActionType.screenshot and len(self.element_selector) == 0:
            raise ValueError(
                "Empty element selector allowed only for 'screenshot' action."
            )
        if self.type != ActionType.drag_to and len(self.element_selector) == 2:
            raise ValueError(
                "Two-element selector allowed only for 'drag_and_drop' action."
            )
        if self.type == ActionType.drag_to and len(self.element_selector) != 2:
            raise ValueError(
                "Two-element selector is required for 'drag_and_drop' action."
            )

        return self


class ScreenshotAction(Action):
    filename: str = Field(description="Path to file to store screenshot.")
    padding: int = Field(20, ge=0)


class Chain(BaseModel):
    name: str = Field("N/D", description="Name of chain to display at logs.")
    url: str = Field(..., description="URL of page to start performing actions at.")
    actions: List[Action | ScreenshotAction] = Field(default_factory=list)


class Flow(BaseModel):
    chains: List[Chain] = Field(default_factory=list)
